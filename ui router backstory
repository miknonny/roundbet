1. ui router backstory.
2. current option, ngRoute, module.
3. Compare ngroute and ui.router.
4. Nested states.
5. state activation.
6. How to activate a state.
7. state urls.
8. Multiple named views.
9. Abstract state.
10. Challenges.
11. resources.



-> ui rounter module contains $sateProvider and $urlRouterProvider

Comparing rounter and state.
A state is place within your app.
A router is like a url within your app.

In states thereis a nested hierachy you can have children and parents but in routes you just have a flat hierachy. you can go from one route to the next.

Note that the name of a state is just a name like 'contacts' but in routes the name could be a url like '/contacts';

you can navigate to a state by its name or the url.
but in route you can navigate by its url only.


in states you can have multiple views(ui-view) that can live at the same level. but with routes you can have only a single view using ng-view.

state can populate any view but with route you populate the one view that you get.

states can populate the parts of your application and also the diffrent quadrants of your screen. but with routes you are on your own to use directives to populate the different parts of your application.

Now lets assume the both of them



$stateProvider
    .state('home', {
      url: '/home',
      abstract: true,
      templateUrl: 'templates/home.html'
    })

 $routeProvider.when('/contacts/:id' {
 	template: 'hello',
 	templateUrl: contacts.html,
 	controllers: Myctrl
 })

note that in ngroute, when is the main method for adding routes.  
In ui.router it is just for creating redirect.

make sure to add UI-router to your head and include it as a dependecy top your module.

Nesting is the main feature of ui routeer.


A typical use case for nesting.
we could have an index.html file. we can have a list to the right side of the document using the ui-view. and when i clickk i want to see the content of each item to the right still using the view that i described.

Note here that we went from a list to a list.detail and this nesting means that we do not have to reload the whole page we only have to reload what has changed on the page.


Note that for deeply nested state the dot notation can become difficult to read and this can be rewritten.
    .state('home.signup', {
      url:'/signup',
      templateUrl: 'signup.html',
      controller: 'SignupCtrl'
    });

Note that we have now assigned the parent property a property of home.
    .state('signup', {
      url:'/signup',
      templateUrl: 'signup.html',
      controller: 'SignupCtrl',
      parent: 'home'
    });
We should consider this if we have states that are more than five states deep.

Object based state is another alternative for deep linked states.

var home = {
	state: 'home',
	templateUrl = contact.html
}

var signup = {
	state: 'signup.html',
	parent: 'home',
	templateUrl: signup.html
}

$stateProvider
	.state('home')
	.state('signup')

Inheritance.

Inheritance.
Child states always inherit from their parent state.


note that we can use the data property to stare anything that is custom.


$stateProvider
	.state('parent', {
		data: {
		customdata1: 'hello',
		customdata2: 'world'
		};
	})

	.state('child', {
		// custom data one is inherited from the parent but // will overite customdata2
		customData2: UI-Router
	});

$rootScope.$on('$stateChangeStart',
	function (event, toState)) {
		var greeting = tostate.data.custom1 + " " + toState.data.custom2;
		console.log(greeting);
	}

Activating a state. 

What happens when a state is activated ?

1. first it is going to merge any option we define with the default option.

2. secondly it is going to see if the state is defined or else it will broadcast $stateNotFound.

3. it will merge the parameters of that state with all the ancestor parameters.

4. next it will figure out which states are changing and which arent. note that if we are going to thesame state and no parameters have changed, there will be no transiction except we have set a reload to true.

5. Next it will broadcast $stateChangeStart.

6. Next it resolves all the locals for the newly activated state. once those locals are resolved that is when the real transition actually begins.


Activating a chid state.
Scenario 1: jump right into your app with  url of:
/contacts/1/edit.
1. activate implicit root state.
2. Activate the contact state.
3. Activate the contact.detail.
4. activate the contact.detail.edit


Scenario2: from there we click contact 2.
1. edit the contact.detail.edit state
2. exit the contact.detail
3. Activate the contact.detail for contact2.

Callbacks.
You can register an onEnter and an onExit for your scope.
	
$stateProvider
	.state('contact', {
		template: '<p>hello</p>',
		resolve:
		controller: myCtrl
	}),
	onEnter: function (title) {
		if (title) {... do something ...}
	},
	onExit: function (title) {
		if (title) {... do something ...} 
	};


How to activate a state.
there are three ways to activate a state.

There are 3 ways to activate a state.
1. state.go()
2. using the s-ref
3. you can manually navigate to the state urls manually.


1. $state.go();
This is the programmatic way to naviagate to scope.

myApp.controller('contactCtrl', ['$scope', '$state',
	function ($scope, $state) {
		$state.go('contact.details', {id: selectedId})
	};
]);

this is how it is done on controllers, your on enters and handlers.

parameters for state.go()
1. state name
2. state parameters.
3. options

Relative Navigation.

We can move relative to the current state.
by using special characters.
^ is up.
. is down

UI-sref
This is a directive that comes with the state router.
it stands for state reference and is used in place of href.

<a ui-sref="home"></a>

This is really nice because if you change your urls later on.
You do not have to go and change them  in  your application.

Note that behind the scenes if does compile to the href.

<a ui-sref="home" href="#/home">home</a>


You can also passing parameters to ui-sref.

<li ng-repeat="contact in contacts"> 
	<a ui-sref="contact.detail({ id: contact.id })">
</li>

we can also use relative paths.
<a ui-sref='^'>


Nested Urls go handsomely with nested state urls.$stateProvider
	.state('contacts', {
		urls: '/contacts'
	});
	.state('contacts.list', {
		urls: '/lsit'
	});
We can also prepend the list with '^' careful not to shot
yourself on the foot.

.state('contact.list', {
	url: '^list'
})
this navigates to #/list instead of #/contacts/list.
This means that you can have nested states with out having their routes be nested.

even through the list is a child its route feels like a top tier url.

note that if your state is nested 3 levels deep. the '^' will
still start at the root.

URL Parameters


Basic parameters
urls: '/contacts/:contactId'
urls: '/contact/{contactId}'

Regex Parametes
The curly bracket syntax is realy useful if you are doing regex.

this one looks for a contactId that is a hexadecimal.
urls: '/contact/{contactId:{0-9a-fA-F}{1,0}}'

Query Parameters.

urls: '/contacts?contactId&contactRegion'



$stateParams.
When we activate a state via url and the url has parameters then the stateParams is going to get populated with those values.


State url
url: '/users/:id/details/{type}/{repeat: [0-9]+}?from&to' 


// Navigate to.
'/users/123/detail//0'

State params will be.

{id: '123', type: '', repeat:'0' };

//Navigate to
'/users/123/details/default/0?from=there&to=here'

// $stateParams will be 

{id: 123, type: default, repeat:0 , from: 'here', to: 'here'}

Now if i do navigate and passing all the parameters it will populate them all out.

			stateParams Caveats
$stateParams is only activated when the state is activated and all the dependencies are resolved.


Multiple Named views.

Pros.
- provides flexibility
- you get to have multiple views in any template.
- Great for singleton top level component. (side panel modal.
- many devs put them to great use.


Cons.
- They are often unnecssary trying to next first.
- leading cause of confusion.
- They can lead to anti patterns.

Quick concept.
By default this is a root state that is always active.
{
	name: '',
	url: '*',
	'abstract': true
};

No name
url is absolute root.
Can't activate it directly.
Most important: its "template" is your index.html


for example you can not access the tab.html directly but you can access the different tabs that are in the tab.html. you can not access the friends tab and the account tab at once. only one view can be present at a time.

this is useful in templates in which two views can not co-exist in one template at thesame time. only one is called at a time.

Naming views.
This is mandatory if you have two or more views that are leaving at thesame level.

<div ui-view="main">
<div ui-view="sidenav">


Configure Multiple Views.
Use the views config object.

Each key is a view name and each value is a view config object.

$stateProvider
	.state('deep.down.state.mainbits', {
		url: "url/still/goes/up/here",
		view: {
			'main@': { ... },    //main view at root state
			'sidenav@': { ... }  // sidenav at root state.
		}
	});

View Name.
Can use absolute or relative naming.

Relative(always parent)
'main' - 'main' view in the parent template.
'' - unamed view in the parent template.

Absolute.
'list@contacts' - 'list' view in 'contacts' state's template.
'list@' list view in index.html. Notice that the right side is empty and this is saying the root, the unamed state. the state that shall remain unamed.

'@'- this targets the unamed view in index.html


Very important for designing views.
1. what quadrants(views) are depenent on other quadrants.
if it depends on it then  nest it inside the other one.

Are multiple quadrants dependent on thesame parent.
And do the quadrants really need to be seperated.

Abstract state.
This is a state that can not be directly activated.

They can have children and can become activated implicity when any of its children are activated.

They are a great place to do work. this is a sort of like a common umbrella for work that needs to be done.


Abstract state Usages.

- to prepend a url to its child state urls.
- To set a template its child state will activate.
 optionally assign a controller to the template.
- provide scope properties and methods for children to inherit.
- Resolve dependencies for child states.
- To set custom data for child state or event to use.
- To run an onEnter or an onExit function.
- Any combination of the above.

Note that the abtstact will need its own ui-view if the child state decides to populate it.

RESOLVES.
This is used to provide content or data that is custom to our state. belongs only to a state.
-its an optional map of dependencies injected into our controller.

- if any of the dependencies is a promise like a http request. these http request will be resolved before the controller is instantited.

- The resolve consist of a key, value(factory) pair.
-  The key is the name of the dependency to be injected into our controller.
- factory value(string or function)
if the value is string then it an alias for a service.
if function the return value is what is mapped to the key.
- the resolved object is injected as a parameter to the controller.

$stateProvider.state('myState', {
	resolve: {
	// function with simple return value. resolves immedialtey since 
	// not promise it resolves immediately.
	simpleObj: function () {
		return {value: 'simple!'};
	},
	
	// An example of a function that returns a promise. You need to 
	// inject the service that you are using. 
	proimiseObj: function ($http) {
		return $http({method:'GET', url: '/someurl'})
	},

	//Another promise example with the then function.
	proimiseObj: function ($http) {
		return $http({method:'GET', url: '/someurl'})
			.then (function (data) {
				return doSomeStuffFirst(data);
			});
	},
	
	// here we are using a service by name as string. it will return a // promise like the previos example.
	// translations: 'translations'

	// Another use off resolve.

	greeting: function ($q, $timeout) {
		var deferred = q.defer();
		$timeout(function () {
			deferred.resolve('hello!')
		}, 1000)
		return deferred.promise;
	}

	controller: function ($scope, simpleObj, promiseObj, promiseObj2, translations) {
		$scope.simple = simpleObj.value;

		//promise objects are ready to use.
		$scope.items = promiseObj.items;
		$scope.items = promiseObj2.items;

		$scope.title = translations.getLang("english").title;
		$scope.title = translations2.title;

		$scope.greetings = greetings;
	}
})


ATTACHING CUSTOM DATA TO STATE OBJECTS.
this example shows an object based and a string based template.
var contacts = { 
    name: 'contacts',
    templateUrl: 'contacts.html',
    data: {
        customData1: 5,
        customData2: "blue"
    }  
}


$stateProvider
  .state(contacts)
  .state('contacts.list', {
    templateUrl: 'contacts.list.html',
    data: {
        customData1: 44,
        customData2: "red"
    } 
  })
- this is how the data will be accessed.
function Ctrl($state){
    console.log($state.current.data.customData1) // outputs 5;
    console.log($state.current.data.customData2) // outputs "blue";
}

onEnter and onExit Callbacks.
This are callbacks that are called when a state becomes active and inactive respectively.
this callbacks have access to all resolved dependencies.

$stateProvider.state("contacts", {
  template: '<h1>{{title}}</h1>',
  resolve: { title: 'My Contacts' },
  controller: function($scope, title){
    $scope.title = 'My Contacts';
  },
  onEnter: function(title){
    if(title){ ... do something ... }
  },
  onExit: function(title){
    if(title){ ... do something ... }
  }
})

STATE CHANGE EVENTS.
All these events are fired at $rootScope level.

-> $stateChangeStart - fired when the transition begins.
$rootScope.$on('$stateChangeStart', 
function(event, toState, toParams, fromState, fromParams){ ... })

we can use event.preventDefault() to prevent the transition from happening.
$rootScope.$on('$stateChangeStart', 
function(event, toState, toParams, fromState, fromParams){ 
    event.preventDefault(); 
    // transitionTo() promise will be rejected with 
    // a 'transition prevented' error
})

-> $stateNotFound v0.3.0 - This is fired when the requested state can not be found. using the provided state during the transition.

// somewhere, assume lazy.state has not been defined
$state.go("lazy.state", {a:1, b:2}, {inherit:false});

// somewhere else
$rootScope.$on('$stateNotFound', 
function(event, unfoundState, fromState, fromParams){ 
    console.log(unfoundState.to); // "lazy.state"
    console.log(unfoundState.toParams); // {a:1, b:2}
    console.log(unfoundState.options); // {inherit:false} + default options
})

$stateChangeSuccess -> fired once the state transition is complete.

$rootScope.$on('$stateChangeSuccess', 
function(event, toState, toParams, fromState, fromParams){ ... })

NESTED STATES AND NESTED VIEWS.

Methods of nesting states.
-> Using the dot notation.
-> Using the ui-router.stateHelper to build states from the nested state tree.
-> using the parent property.
-> Using the parent property with the parent object.
1.)
Dot Notation
$stateProvider
  .state('contacts', {})
  .state('contacts.list', {});
2.)
State helper module.
This is a third party module so you have to include it in addition to  ui-router.

angular.module('myApp', ['ui.router', 'ui.router.stateHelper'])
  .config(function(stateHelperProvider){
    stateHelperProvider.setNestedState({
      name: 'root',
      templateUrl: 'root.html',
      children: [
        {
          name: 'contacts',
          templateUrl: 'contacts.html',
          children: [
            {
              name: 'list',
              templateUrl: 'contacts.list.html'
            }
          ]
        },
        {
          name: 'products',
          templateUrl: 'products.html',
          children: [
            {
              name: 'list',
              templateUrl: 'products.list.html'
            }
          ]
        }
      ]
    });
  });


3.
parent property using state name string.
$stateProvider
  .state('contacts', {})
  .state('list', {
    parent: 'contacts'
  });

 4.

Object based states.
var contacts = { 
    name: 'contacts',  //mandatory
    templateUrl: 'contacts.html'
}
var contactsList = { 
    name: 'contacts.list', //mandatory. This counter-intuitive requirement addressed in issue #368
    parent: contacts,  //mandatory
    templateUrl: 'contacts.list.html'
}

$stateProvider
  .state(contacts)
  .state(contactsList)


Registering states.
You can register states in any order. you can register states before the parents exists.

Parent must exist.
if you define a single state called contact.list, you must define a single state called contacts.


Naming you states.
No two states can have thesame name.
-when using the dot notation the parent must be explcitly provided.
-no two states can can thesame name even if their parents are different.



Nested States and views.
when a state is active,  all its ancestor states are implicitly active as well. when the contact.list state is active, the contacts state is active as well.


What do child states inherit from their parent states?
i Resolved dependencies via resolve.
ii custom data properties.

Inherited resolved dependencies.
Child states can inherit resolved dependencies from parent which they can overide.

$stateProvider.state('parent', {
      resolve:{
         resA:  function(){
            return {'value': 'A'};
         }
      },
      controller: function($scope, resA){
          $scope.resA = resA.value;
      }
   })
   .state('parent.child', {
      resolve:{
         resB: function(resA){
            return {'value': resA.value + 'B'};
         }
      },
      controller: function($scope, resA, resB){
          $scope.resA2 = resA.value;
          $scope.resB = resB.value;
      }


Scope inheritance by view only hierarchy.
Scopes properties only inherit down the state if the view of your chian are nested. Inheritance of scope has nothing ot do with nesting of states. and everything to do with the nesting of your templates(views).


ABSTRACT STATE.
An abstract state can have a child state but can not get activated itself. you have to call one of the child state to be able to activate it.

uses of abstact state.
-uses to prepend a url to the child state.
-to insert a template within its own ui-view that the child state will populate.
- To provide a resolve dependency via resolve to use for child state.
- to provided inherited custom data.

Remember that abstract states need their own ui views for their children to plug into.

$stateProvider
    .state('contacts', {
        abstract: true,
        url: '/contacts',

        // Note: abstract still needs a ui-view for its children to populate.
        // You can simply add it inline here.
        template: '<ui-view/>'
    })
    .state('contacts.list', {
        // url will become '/contacts/list'
        url: '/list'
        //...more
    })
    .state('contacts.detail', {
        // url will become '/contacts/detail'
        url: '/detail',
        //...more
    })



Nested Views.
You can name your view so we call have more than one ui-view per template.

- when setting up multiple views you need to use the views property on state. views is an object.

if the views object is used your states templateUrl templateprovider and template will be ignored.


An example of a multiple view. using name matching.

<!-- index.html -->
<body>
  <div ui-view="filters"></div>
  <div ui-view="tabledata"></div>
  <div ui-view="graph"></div>
</body>

$stateProvider
  .state('report', {
    views: {
      'filters': { ... templates and/or controllers ... },
      'tabledata': {},
      'graph': {},
    }
  })
Note that each view can set up its own template url, template and template provider.
$stateProvider
  .state('report',{
    views: {
      'filters': {
        templateUrl: 'report-filters.html',
        controller: function($scope){ ... controller stuff just for filters view ... }
      },
      'tabledata': {
        templateUrl: 'report-table.html',
        controller: function($scope){ ... controller stuff just for tabledata view ... }
      },
      'graph': {
        templateUrl: 'report-graph.html',
        controller: function($scope){ ... controller stuff just for graph view ... }
      },
    }
  })


  View names. Relative Vs Absolute names.
  Behind the scene every view gets assigned an absolute name that follows a scheme viewname@statename, where view is the name used in the view directive. and state name  is the absolute state name. eg. contact.item. you can also choose to write your view names using the absolute syntax.

  .state('report',{
    views: {
      'filters@': { },
      'tabledata@': { },
      'graph@': { }
    }
  })

this is same as the similar one. here the view is now expressed as absolute state instead of relative state.


in the above example, there is nothing following the @. the root unamed state is your index.html.

<!-- index.html (root unnamed template) -->
<body ng-app>
<div ui-view></div> <!-- contacts.html plugs in here -->
<div ui-view="status"></div>
</body>

<!-- contacts.html -->
<h1>My Contacts</h1>
<div ui-view></div>
<div ui-view="detail"></div>

<!-- contacts.detail.html -->
<h1>Contacts Details</h1>
<div ui-view="info"></div>

Now lets look at the different views that we could target. remember that if an @ is used that we could target only the root views.

stateProvider
  .state('contacts', {
    // This will get automatically plugged into the unnamed ui-view 
    // of the parent state template. Since this is a top level state, 
    // its parent state template is index.html.
    templateUrl: 'contacts.html'   
  })
  .state('contacts.detail', {
    views: {
        ////////////////////////////////////
        // Relative Targeting             //
        // Targets parent state ui-view's //
        ////////////////////////////////////

        // Relatively targets the 'detail' view in this state's parent state, 'contacts'.
        // <div ui-view='detail'/> within contacts.html
        "detail" : { },            

        // Relatively targets the unnamed view in this state's parent state, 'contacts'.
        // <div ui-view/> within contacts.html
        "" : { }, 

        ///////////////////////////////////////////////////////
        // Absolute Targeting using '@'                      //
        // Targets any view within this state or an ancestor //
        ///////////////////////////////////////////////////////

        // Absolutely targets the 'info' view in this state, 'contacts.detail'.
        // <div ui-view='info'/> within contacts.detail.html
        "info@contacts.detail" : { }

        // Absolutely targets the 'detail' view in the 'contacts' state.
        // <div ui-view='detail'/> within contacts.html
        "detail@contacts" : { }

        // Absolutely targets the unnamed view in parent 'contacts' state.
        // <div ui-view/> within contacts.html
        "@contacts" : { }

        // absolutely targets the 'status' view in root unnamed state.
        // <div ui-view='status'/> within index.html
        "status@" : { }

        // absolutely targets the unnamed view in root unnamed state.
        // <div ui-view/> within index.html
        "@" : { } 
  });

URL ROUTING.

-> Url Parameters.
the dynamic parts of urls are called parameters.
A basic parameter looks like this.


stateProvider
	.state('contacts.detail', {
		url: 'contacts/:contactId',
		templateUrl: 'contacts.detail.html'
		controller: function ($stateParams) {
			//  if we got here from a url of  /contacts/42
			expect($stateParams).toBe({contactId:42});
		}
	})

Alternatively, we can use  curly braces.
url: '/contacts/{contactId}'



'/hello/' - this matches if the users name is exactly '/hello/' There are no special treatment for trailing slashes. this patterns have to match the entire path.

'/user/:id' - '/user/bob' or '/user/1234!!!'. This second parameter will be captured as the parameter 'id'.

























